package main

//一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 N 级的台阶总共有多少种跳法。

//答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

//递归法，LeetCode 无法通过，时间太长了，还是迭代法
// 采用分而治之的思想，其问题可以拆分为，因为青蛙第一次要么是一个台阶，要么是两个台阶。只有两种克性能
//假设青蛙第一次跳一个台阶，剩下 N-1 个台阶怎么跳，或者是第一次跳两个台阶，剩下的 N-2 个台阶怎么跳。
// 两种假设加在一次就是 跳N个台阶的跳法次数，做法参考斐波拉契数列
func numWays(n int) int {
	if n == 0 {
		return 1
	}
	if n <= 2 {
		return n
	}
	// n= 0 0
	// n=1 1
	// n=2 2
	// n=3 f(3) = f(2) + f(1) = 2 + 1 = 3 [0,1,2] 从 n= 3 开始，起始数列为[0,1,2],经过n=3 之后变为 [1,2,3]
	p, q, r := 0, 1, 2
	for i := 3; i <= n; i++ {
		p = q
		q = r
		r = (p + q) % (1e9 + 7)
	}
	return r
}
func main() {
}
